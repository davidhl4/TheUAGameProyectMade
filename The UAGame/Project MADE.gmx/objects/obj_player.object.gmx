<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_stand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_player_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>541</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sprite_set</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>5</kind>
            <sprite>spr_player_stand</sprite>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0.25</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Inicializar vaiables

grav = 1; // Gravedad
spd = 6;  // Velocidad
jspd = 20;// Velocidad de salto
hspd = 0; // Velocidad horizontal
vspd = 0; // Velocidad vertical
fric = 1; // Friccion
dash = false; // SI se usa dash o nd
dashcheck = false
dash_cd = false; // Cooldown del dash
dspd = 15; // Velocidad del dash
invul = false; // Invulnerabilidad
vida = 6; //vida del jugador
checkini = true;
checkfin = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>201</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_create_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>-1</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>10</kind>
            <object>obj_cabeza</object>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>201</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_create_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>-1</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>10</kind>
            <object>obj_brazo</object>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>invul = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>211</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>snd_salto</sound>
          </argument>
          <argument>
            <kind>3</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>211</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>snd_dash</sound>
          </argument>
          <argument>
            <kind>3</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dashcheck = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Devolver velocidad

hspd = 0;
dash = false;
spd = 6;
invul = false;
instance_create(x,y,obj_cabeza);
switch(obj_controlaArmas.arma){
    case "nada": 
        instance_create(x,y,obj_brazo);
        break;
    case "bananastola": 
        instance_create(x,y,obj_bananastola);
        break;
   /* case "explosiva":
        instance_create(x,y,obj_arma_explosiva_new);
        break;
    case "laser":
        instance_create(x,y,obj_arma_laser);
        break;
    case "escoeta":
        instance_create(x,y,obj_arma_escopeta);
        break;
    case "lanzagomas":
        instance_create(x,y,obj_lanzagomas_aut);
        break;
    */

}
alarm[1] = room_speed/7;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movimiento del jugador y sprites

//----------------------------------------------------------
// =====================  MOVIMIENTO  =====================
//----------------------------------------------------------
 
var rkey = keyboard_check(ord('D')); // Derecha
var lkey = keyboard_check(ord('A')); // Izquierda
var jkey = keyboard_check_pressed(vk_space); // Saltar
var dkey = keyboard_check(ord('S')); // Debajo
getdash = dash;
//Comprobar si hay suelo
if(place_meeting(x, y+1, obj_solid) &amp;&amp; dash==false) {
    vspd = 0;
    
    //Salto
    if(jkey == true){
        alarm[3] = 1;
        vspd = -jspd;
    }
}else if(place_meeting(x, y+1, obj_semiblock) &amp;&amp; !place_meeting(x, y, obj_semiblock) &amp;&amp; dash == false){
    if(vspd &gt;= 0){
        vspd = 0;
        if(jkey == true){
            alarm[3] = 1;
            vspd = -jspd;
        }    
    }
}
// Si no hay suelo...
else{
    //Gravedad
    if(vspd &gt; 0&amp;&amp; dash==false){
        vspd += 1.25*grav;
    }    
    if(vspd &lt;= 0&amp;&amp; dash==false){
        vspd += grav;
    }
    
    
    if(keyboard_check_released(vk_space) &amp;&amp; vspd &lt; -4 &amp;&amp; dash==false){
        vspd = -4;
    }
    
    
}
//Caida desde una plataforma
if(dkey &amp;&amp; place_meeting(x, y+1, obj_semiblock)) y++;



// Movimiento Derecha
if(rkey &amp;&amp; dash==false){
    if(hspd &lt; spd){
        hspd += fric;
    }else{
        hspd = spd;
    }
}

// Movimiento Izquierda
if(lkey &amp;&amp; dash==false){
    if(hspd &gt; -spd){
        hspd -= fric;
    }else{
        hspd = -spd;
    }
}

// Comprobar movimiento nulo
if((!rkey &amp;&amp; !lkey) || (rkey &amp;&amp; lkey)){
    if(hspd != 0){
        if(hspd &lt; 0){
            hspd += fric;
        }else{
            hspd -= fric;
        }
    }
}

// Colisiones horizontales normal
if(place_meeting(x+hspd, y, obj_solid)){
    while(!place_meeting(x+sign(hspd), y, obj_solid)){
        x += sign(hspd);
    }
    hspd = 0;
}

// Colisiones horizontales dash
if(place_meeting(x+dspd, y, obj_solid) &amp;&amp; dash == true){
    while(!place_meeting(x+sign(dspd), y, obj_solid)){
        x += sign(dspd);
    }
    dspd = 0;
}

// Intento de DASH 01
if(mouse_check_button_pressed(mb_right) &amp;&amp; dash_cd == false){
    alarm[2] = 1;
    invul = true;
    dash = true;
    dash_cd = true;
    spd = 0;
    hspd = 0;
    vspd = 0;
    if(rkey == true){
        if(place_meeting(x+12.1, y, obj_solid) == true){
            invul = false;
            dspd = 0;
            dash = false;
            dash_cd = false;
            spd = 6;
        }else dspd = 15;
        
    }else if(lkey == true){
    if(place_meeting(x-12.1, y, obj_solid) == true){
            invul = false;
            dspd = 0;
            dash = false;
            dash_cd = false;
            spd = 6;
        }else dspd = -12;
        
    }else{
        if(x &lt; mouse_x){
            if(place_meeting(x+12.1, y, obj_solid) == true){
                invul = false;
                dspd = 0;
                dash = false;
                dash_cd = false;
                spd = 6;
            }else dspd = 12;
            
        }
        if(x &gt; mouse_x){
            if(place_meeting(x-12.1, y, obj_solid) == true){
                invul = false;
                dspd = 0;
                dash = false;
                dash_cd = false;
                spd = 6;
            }else dspd = -12;
            
        }
    }
    
    
    
    alarm[0] = room_speed/3;
}

//dashcheck
if(dash == false &amp;&amp; dashcheck &amp;&amp; (place_meeting(x,y+1,obj_solid)||place_meeting(x,y+1,obj_semiblock)))
dash_cd=false;


// Moverse horizontalmente
if(dash == true){
    x += dspd;
}else x += hspd;

// Colisiones verticales
if(place_meeting(x, y+vspd, obj_solid)){
    while(!place_meeting(x, y+sign(vspd), obj_solid)){
        y += sign(vspd);
    }
    vspd = 0;
}else if(place_meeting(x, y+(vspd), obj_semiblock) &amp;&amp; !place_meeting(x, y, obj_semiblock) &amp;&amp; (vspd &gt;= 0)){
    while(!place_meeting(x, y+sign(vspd), obj_semiblock)){
        y += sign(vspd);
    }
    vspd = 0;
}

// Moverse verticalmente
y += vspd;



//-------------------------------------------------------
// =====================  SPRITES  =====================
//-------------------------------------------------------

// Control del sprite
if(yprevious != y){
    sprite_index = spr_player_jump;
    image_speed = 0;
}else{
    if(xprevious != x){
        sprite_index = spr_player_moove;
        image_speed = 0.3;
    }else{
        if(dash == false)
            sprite_index = spr_player_stand;
    }
}

// Control de la direccion a la que mira el jugador
if(x &gt; mouse_x &amp;&amp; dash == false){
    image_xscale = -1;
}else if(x &lt; mouse_x &amp;&amp; dash == false){
    image_xscale = 1;
}else if( dash == true &amp;&amp; xprevious &gt; x){
    sprite_index = spr_player_dash;
    image_xscale = -1;
}else if( dash == true &amp;&amp; xprevious &lt; x){
    sprite_index = spr_player_dash;
    image_xscale = 1;
}else if( dash==true){
    
}
 
fotograma = sprite_index;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Detectar muertes
if(y &gt; room_height){
    if(checkini==true){
        x = obj_checkpoint_ini.x;
        y = obj_checkpoint_ini.y;
        vida-=1;
    }else{
        x = obj_checkpoint_fin.x;
        y = obj_checkpoint_fin.y;
        vida-=1;
    }
}
if(vida&lt;1){
    if(checkini==true){
        x = obj_checkpoint_ini.x;
        y = obj_checkpoint_ini.y;
        vida-=1;
    }else{
        x = obj_checkpoint_fin.x;
        y = obj_checkpoint_fin.y;
        vida-=1;
    }
    vida = 6;
    room_restart();
}










</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_generador_armas">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>obj_bananastola</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch (obj_controlaArmas.arma){
    
    case "bananastola":
        with (obj_bananastola){
        instance_destroy();
         }
    case "laser":
        with (obj_arma_laser){
        instance_destroy();
        }
    case "escopeta":
        with (obj_arma_escopeta){
        instance_destroy();
        }
    case "lanzagomas":
        with (obj_lanzagomas_aut){
        instance_destroy();
        }
    case "explosiva":
        with (obj_arma_explosiva_new){
        instance_destroy();
        }
    default:
        break;
        }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_mele">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Comprobar colision

if(invul == false){
    vida  -= 1;
    invul = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>10</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>4</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bala_enemigo">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Comprobar colision

if(invul == false){
    vida  -= 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_PrevRoom">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = -200;
y = -200;

if !instance_exists(obj_transition_prev){
    var  tempRoomFade;
    tempRoomFade = instance_create(x,y,obj_transition_prev);
}

x = obj_PrevRoom.x+128;

checkini = false;
checkfin = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_NextRoom">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = -200;
y = -200;

if !instance_exists(obj_transition_next){
    var  tempRoomFade;
    tempRoomFade = instance_create(x,y,obj_transition_next);
}

x = obj_NextRoom.x-128;

checkini = true;
checkfin = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
